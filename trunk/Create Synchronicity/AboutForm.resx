<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="About_Logo.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>